[{"content":" When you are starting a new project, choosing a programming language is a hard choice. Here is my take.\nOn one hand, you might want to choose a cool language but on another hand, you might want to choose a stable language.\nFor Web servers or any general-purpose production system\nDisclaimer\nBefore you read further, I want to clarify that languages and frameworks are just tools, they don\u0026rsquo;t guarantee success, the way you design and code your system makes all the difference, tools will just help you ease the process if used correctly.\nMy criteria Static typing Compiled Good community support Good libraries Good frameworks Functional Memory management Easy (relatively not steep learning curve) My criteria - language choice Static typing (Because error-proof, Performance optimization)\nJava, C, Rust, Go (sorry python and javascript)\nCompiled (Performance, Memory)\nJava, C, Rust, Go\nGood community support (Don\u0026rsquo;t want to be alone using the best programming language)\nJava, C, Rust, Go, Python, Javascript\nGood libraries (Don\u0026rsquo;t want to reinvent the world)\nJava, Javascript, Python, Go\nGood frameworks (Library is okay but full fledge framework is required!)\nJava, Javascript, Python, Go(Still evolving)\nFunctional (I am not a rigid OOP guy)\nJavascript, Go\nMemory management (As they say, if you want to make a pie from scratch, you must first create the universe. C is good but Assembly is best. I need productivity.)\nJava (Nearly there), Javascript (lousy), Rust (Awesome), Go\nEasy (relatively not steep learning curve) (Need talent already knowing lang or can be learned easily)\nPython, Javascript, Go\nMy choice Go (easy, good syntax, static typing and compiles fast, many libraries, menial resource consumption)\nOther reasons apart from mentioned above\nNo magic code (If you add @Transactional in spring, it takes care of starting, ending, and committing your transactions. It is magic. But it is double edged sword. It can do harm if not coded properly. Go is IdiotProof) (Also it is hard to master the magic code. It would take weeks or months for anyone to learn Spring annotations or Ruby coding styles.) Minimal resource consumption (CPU, memory - spring takes 100+ MiB to start) Opinionated code (There are only minimal ways you can code something - makes it easy to manage a large team and codebase) Great threading (If you spin off 1000 threads in java with Thread.sleep(10 * 1000) then your app will become unresponsive. That doesn\u0026rsquo;t happen with goroutines. At least it is not as bad as java) Many cloud native and open source tools are written in go. kubernetes, docker, and sops are some examples More comprehensive list about other features of Go is listed in other post What I don\u0026rsquo;t like about Go?\nA solid framework like spring (gin is available though! Not sure how good is that). Module management (Now they have!) No generics (Maybe that is for good!) (update, now they are adding that too) Extra things like liquibase integration (There are ways, but no out of box ways) Edit 1\nKotlin, spring-native/micronaut, and GraalVM (Maybe)\nThe day go will have all features as java, java will be as fast as go\n- Graeme Rocher (creator of Groovy, Grails, Micronaut)\nWith GraalVM \u0026amp; spring-native or micronaut, we get compiled code\nWith Kotlin, we get awesome syntax, functional support within Java ecosystem. Also, with reactive java, we can solve threading issues. Reactive itself is hard though.\nSo maybe Kotlin, spring-native/micronaut, and GraalVM. Depends on the preference of other stakeholders, existing knowledge, etc.\nHonorary mentions Python: Easy\nHowever, I think pandas, numpy, jupyter notebook, and usage from non-coding background users are the reasons for python\u0026rsquo;s popularity\nGood to start but not good performance/memory wise in production\nContrary to popular belief I don\u0026rsquo;t like python. Because you need javascript in frontend for sure, some compiled lang in backend for sure then why learn a new language, use either of them - use max two!\nHuge respect though. Easiest to get started with. Not chosen because I am searching for prod server language.\nJava: Almost chose.\nYou go anywhere, you find java. You need to do anything, you can do it in java. The best thing, you don\u0026rsquo;t need to depend on any other languages like python/javascript which are just a wrapper of C code\nNot compiled. Still needs relatively higher memory - this is the reason I didn\u0026rsquo;t choose it, bit slower than compiled - at least I have been told so\nC: Best. But when I need a needle I won\u0026rsquo;t use a sword.\nC++: Controversial. Linus doesn\u0026rsquo;t like it. Anyways almost like C.\nRust: Awesome memory management.\nDoesn\u0026rsquo;t shine when need things faster - from my 30k feet view (correct me if I am wrong).\nAlso not good at frameworks.\nJavascript: Never thought it would become so popular.\nEasy.\nYou can do almost anything. Hugely error prone, lousy memory management\nHowever, bootstrapping doesn\u0026rsquo;t require too much memory (It sounds crazy given the fact that it has to call C APIs at runtime!). For simple programs, it takes less than 100MBs as compared to java which requires 500MBs. Even if javascript requires chrome engine to work. I have chosen this for simple rest APIs or simple kafka consumers because of best time to market.\nNot to forget almost the best event based paradigm. Love it for IO.\nTypescript: Huge fan.\nDon\u0026rsquo;t like it because it still compiles to javascript. Otherwise easy, great tooling, great community support. Great overall.\nThe day typescript will have its own compiler, I will use this.\nKotline, Scala, Groovy: What typescript is for javascript, these languages are for java\nClojure: Because of Lisp. However not sure much. Still compiles to java!\nC#: Java\u0026rsquo;s brother (or Sister!). I am anyways an opensource guy.\nPHP: Are they still using it! Wordpress. If you remove wordpress never seen PHP anywhere. I don\u0026rsquo;t think facebook still uses it.\nCredit Photo by Markus Spiske on Unsplash\n","permalink":"https://akshayvadher.github.io/posts/the-programming-language-i-am-excited-to-use/","summary":"When you starting a new project, choosing a programming language is a hard choice. Here is Here is my take.","title":"The Programming Language I Am Excited to Use"},{"content":" A story when I was a fresher üë∂üèª in an IT company.\nI was working on a project where nothing was going good. The deadline was near and the work was mammoth. There was no way we could complete the given work on deadline.\nOn top of that, we had multiple issues. My team leader had a nervous breakdown. A few team members were lethargic ü•¥. I just got a fracture in my leg. The manager was eager to complete the work in any way.\nI felt like I was the only one taking all the work on my shoulder. I felt tired üò´.\nOne day we had so many open items for me, I was overwhelmed, I didn\u0026rsquo;t know where to start, the problems were so complex - it felt way out of my league, nobody there to help, everyone expecting me to complete everything. It was frustrating. I felt numb üòë.\nI did something any impatient person would do. I left. In the middle of the day. Left everything. All I wanted was to not think about work, go home and rest. Maybe I won\u0026rsquo;t come to work the next day. Or ever!\nThen something happened.\nAs I was leaving, the watchman was standing outside of the building. Out of blue, he started talking to me.\nThis was his problem: A few days ago, he missed starting his shift on time, he was late for 15 mins. A senior manager had to attend a call from the office and the office was locked (because the security guy was not available). The manager complained to the security firm. The security firm expelled him from the job.\nThis was not enough, his salary was around ‚Çπ5000. The standard cost of living in India would be ‚Çπ15000 I assume. He had at least 2 kids and a wife. He was living off on a menial salary but this time he didn\u0026rsquo;t have anything. He didn\u0026rsquo;t know how he would provide for food - for his kids.\nHe wanted to leave everything. He wanted to leave his organization and go back to his village.\nSuddenly my problems seemed tiny. I didn\u0026rsquo;t have a family to provide for. I didn\u0026rsquo;t have any liability. I was earning more than the standard cost of living. My parents were well off. I had the luxury of getting good education. He had real problems.\nI never had to think about food, a roof, or clothes.\nI turned around. Went to the office. Started working on problems one at a time (problem solving is not hard, you just have to take one step at a time. Tiny steps. Not think about everything at hand. Different topic though. We will talk about this in detail in another post). Suddenly my engineering lead came for help, he put other good members to the team, I started getting help. We were about to deliver the product on time - of course with countless sleepless nights.\nThe conclusion: When you feel low, think about real problems people might have, ours are simple. Work on a single tiny doable item.\nP.S. Now I think that day, I should have helped him in any way possible; maybe financial. I was naive back then.\nP.P.S. Still, over time I\u0026rsquo;ve learnt that, though some have bigger and real issues, some issues are as hurting as the real ones. For example, being in depression or losing a parent; the issue with those issues is, every day you have to live that issue, there isn\u0026rsquo;t anything you can do to rever or get around. Seek professional help for those.\nCredit Photo by Benjamin Davies on Unsplash\n","permalink":"https://akshayvadher.github.io/posts/when-i-felt-low-i-got-motivation-booster-hard-way/","summary":"There was a time when I felt low. I wanted to leave everything and rest. Something happened and I got motivation to work. A sad motivation.","title":"When I Felt Low I Got Motivation Booster Hard Way"},{"content":" Background I come from a callow project.\nWe didn\u0026rsquo;t have tests, no package manager, no build tools, no CI/CD pipelines.\nWe used to manually build from eclipse, copy war files.\nWe used to manually execute SQL changes with every release.\nA chance My then project manager came and asked me that \u0026ldquo;Should we start writing automated tests?\u0026rdquo;.\nI being naive, said NO.\nReason Whenver I see videos and articles about unit testing. I see following example.\n@RequestMapping(\u0026#34;/happy\u0026#34;) public class HappyBirthdayController() { @GetMapping(\u0026#34;/birthday\u0026#34;) public String sayHappyBirthday() { return happyBirthdayService.sayHappyBirthday(); } } Test case\npublic class HappyBirthdayControllerUnitTest() { HappyBirthdayController controller; @BeforeEach void setup() { HappyBirthdayService service = mock(HappyBirthdayService) controller = new HappyBirthdayController(); } void testThatHappyBirthdayIsCallingService() { controller.sayHappyBirthday(); verify(service).sayHappyBirthday(); } } The same way, every example mocks databases. That was the biggest issue for me.\nWe are not developing algorithms, we are developing APIs, which need to interact with databases.\nIf you are mocking the database then you are losing out a big chunk of logic from testability perspective.\nReason 2 If you ask a developer to add test cases to existing API then (s)he will write some junk code and name that a test case. Nobody tests the tests!\nIt is possible that dev missed a few cases. Don\u0026rsquo;t get me started on code coverage; that measure is useless to some extent.\nThe way I used to work Let\u0026rsquo;s say I needed to create one API that says happy birthday.\nThe first step, I create API spec. Create postman sample and execute it before writing any code. Just to make sure no one has created that API.\nThen I would write a controller and make sure that API is not giving 404 now but throwing 500, just to make sure controller is working properly.\nThen I wire service and repository classes and execute the API. It should throw SQL error, not java code error.\nThen I would create DB and execute the API from postman again.\nCase 2 When I have to fix a bug, the first thing I do is to make sure I can reproduce the issue.\nCase 3 There were some scenarios where I had doubts about APIs, APIs were working and providing OK but I didn\u0026rsquo;t have confidence, So I used to comment out one of the logical steps and make sure the API fails.\nIntroduction We obviously had multiple issues.\nOur engineering head came to me and asked me to check out BDD (Behavior Driven Development). I tried that out and liked (not loved right away but liked)\nThe idea is to write test cases first. Failing test case. That clicked me. It solved my biggest issue now you are testing your tests cases too.\nI stumbled upon test containers; the idea is to use docker to start actual DB and connect to that in tests. It solved my another challenge to test database\nI loved the idea.\nAdaptation When I looked back, it seems that I was following TDD all along. It\u0026rsquo;s just that I never Automated my steps.\nI saw choonkeat\u0026rsquo;s TDD video in a Go conf. I loved it. It is a must watch. That made sense to me. I am a getting things done guy (with code quality an integral part though).\nThe biggest thing is it gives you steps to follow to complete your work. It is now not additional time to write your tests but you are creating tests as part of development and creating regression test suite along the way. That gives me confidence to refactor my code\nIt helps me take baby steps. As I first write API integration test, then I write controller test to solve first error then I write service tests to write the second error and then I write liquibase DB migration changesets to solve the SQL error.\nEventually, I created one TDD video. Not to be helpful to others but just to practice and learn.\nTDD rules - takeaways If you don\u0026rsquo;t read anything from this post, just make sure you do the following two things\nMake sure you have a failing test first Don\u0026rsquo;t write any code before you have a failing test Issues The example I mentioned above still ended up in our test suite. I think having that type of test cases are silly.\nMost TDD folks don\u0026rsquo;t agree with me. The problems with that type of test case are\nIt does not test anything There is no way that type of test case can fail alone. There will always be one API integration test failing along with that. It takes additional time to test It is noise - when you have to change your structure, you have to change this test case as well Most important: You are testing your structure while you should only be testing your behaviour In my (controversial) opinion, delete the mocking testcases. I hate mocking.\nMocking It might sound harsh but I really hate mocking.\nOkay, mocking is useful when there are several cases you cannot cover in integration tests.\nExample: When I search from a list, it should filter based on starts with, case insensitive, avoid special chars, search multiple words, etc.\nSo in this case, it is wise to create one integration test which takes one of these scenarios and provide result. Then create multiple unit test cases to cover all the scenarios.\nBut when you are writing a CRUD operation - where only scenario is to store value in DB and read from it, mocking testcases don\u0026rsquo;t help but become noise.\nSo thumb rule - keep unit test only when the cases are not covered by integration tests or it is not practical to write so many integration tests.\nTDDfor those who dont need it Unit testing in angular. TDD screencast. ","permalink":"https://akshayvadher.github.io/posts/my-journey-to-test-driven-development/","summary":"How I became TDD evangelist from testing hating guy","title":"My journey to test driven development (TDD)"},{"content":" (Echeveria Elegans, Grafted moon cactus, and Haworthia Cymbiformis)\nI like nature and plants in general but succulents are my favorite. However, I love cacti the most. (Cactus is subtype of succulent itself, so following applies to both mostly)\nCactus teach you that no matter how the situation is, you keep living your life the fullest. Not just that, bloom like you are the happiest.\n- Me üòÅ\nCare It doesn\u0026rsquo;t need any care. You go on a vacation for a month and on return, the catus will welcome you with the same freshness.\nNo water, no issue; no sunlight, no issue; too much sunlight, no issues.\nBeauty No offence to rose lovers (I like roses too) but they are liabilities (the princess of plants). Roses are beautiful.\nBut, cactuses are equaly beautiful. I admire their beauty more as it came without care!\nJust look at the images of Huernia Zebrina blooms It makes my ugly shoe rack beautiful Flower It produces awesome flowers as seen in other photos, here are some more (Barrel cactuses, Echinocactus spp) Space You put all of them in one pot and still they will thrive (Bunny Ears Cactus) Children How it started and how it is going Every leaves of these plants can be potentially a plant. Name the plant is literally \u0026ldquo;mother of thousands\u0026rdquo; Shape It can take wierd (argubly beatiful) shape without any special treatment\nFloowing two photos are the same plant (the first one is child of the second one) (Echinopsis oxygona - Easter Lily Cactus) This(above) plant enhanced office desk for many months\nImage credit Me me me. Everything is from my garden. I have many more I could not put in the post.\nIt feels like I need to use proper camera from next time!\n","permalink":"https://akshayvadher.github.io/posts/i-like-cactus-more-than-rose/","summary":"I like nature and plants in general but cactuses are my favorite, here is why","title":"I Like Cactus More Than Rose üåµ"},{"content":"In another post, I described what are the criteria I would use to use to select a programming language. I chose Go as the primary one.\nHowever, after using it, those are not the only thing I like about Go. Here is the list of things I like about Go that stand out.\nGo Routines (async by default) This is the biggest thing\nJava code is synchronous, if we want to have async processing then we have to use Reactive Programming (which is the hardest paradigm I have learnt). Every new request in java creates a new OS thread - which takes up too many resources.\nJavaScript uses async and await to accomplish this. Same for c# and rust.\nGo does async IO operation by default, you don\u0026rsquo;t need to explicitly write anything to achieve async.\nGo Routines are awesome. It creates lightweight threads (which are not related to OS threads) hence we can create thousands of them without worrying about resources.\n[Case study] I wanted to do performance testing. I started using JMeter but soon I had to have multiple instances running just to do performance testing. Then I chose Gatling because of its async actor model; it was nice but the setup process was a bit tedious. Then I came across k6, it makes use of go routines the best way, now I could generate the same amount of traffic from my local machine.\n[Case study] We made a mistake in our Java code. There was async operation that had to be started after 2 seconds. So we added Thread.sleep(2). Even though it was async, it created threads and (Little did we know) there were apparently thousands of such requests, hence our \u0026ldquo;async\u0026rdquo; operation crashed the whole server. That can never happen in Go.\nBest of everything For readability use python\nFor performance use rust\nFor everything use java (nobody ever got fired for chosing java)\nFor fast delivery use python, javascript\nNotice how Go is not there in any of choice? It is because Go is #2 in everything.\nIf you use Python then you compromise performance, if you use C then you compromise readability. But if you chose Go, then you get the best of everything.\nIt is easiest to write clean and performant code with GO (and fewer ways to go wrong)\nMinimal keywords Go doesn\u0026rsquo;t have a rich set of keywords.\nFor example, other programming language has while, for, and do while for loops; Go has only for.\nGo doesn\u0026rsquo;t have ternary operator, because it has if.\nFormatting I personally have some issues with Go formatter. However, I love the fact that go has formatter.\nThe formatter is built inside Go lang. So every code in Go across geography and projects is formatted equally.\n+clean coding\nEasy learning curve Based on the above two points, since it has minimal keywords hence there are minimal ways something can be achieved and the code is formatted the same way, it is easy to learn Go.\nCompiler If a variable is not used but declared or the import is not used but declared then it does not allow to compile.\nAlong with that, the compiler is one of the fastest. (as compared to other languages where we need to integrate sonar to get formatting or unused variable issues. These things take time, while Go compiler does all those things blazingly fast)\n+clean coding\nMinimal magic If you add @Transactional in spring(java), it takes care of starting, ending, and committing your transactions. It is magic. But it is double edged sword. It can do harm if not coded properly.\nGo is IdiotProof\nAlso it is hard to master the magic code. It would take weeks or months for anyone to learn Spring annotations or Ruby coding styles.\nI could not figure out from where my spring/micronaut project is injecting java.time module of jackson library - I have been working in java for 10 years. But I could figure out from where aws-otel library is injecting otel library\u0026rsquo;s code by searching for just a few mins - I never worked on Go PROD code\nTesting (and code analysis) Go has testing, coverage, benchmarking, race condition detection, test with random data generation, static code analysis, and http mock server in built.\nTesting go test to test all the *_test.go files\nCoverage go build -cover to check coverage with tests\nBenchmarking go test -bench=\u0026quot;.\u0026quot; to benchmark, example output of a function that calculates primenumber as following\ngo test -bench=. -benchtime=10s BenchmarkPrimeNumbers/input_size_100-4 3010218 4073 ns/op BenchmarkPrimeNumbers/input_size_1000-4 143540 86319 ns/op BenchmarkPrimeNumbers/input_size_74382-4 451 26289573 ns/op BenchmarkPrimeNumbers/input_size_382399-4 43 240926221 ns/op PASS ok github.com/xyz/random 54.723s Race detection go test -race can check if two go routines are trying to read write the same memory address\nTest with random data generation In the following example, we don\u0026rsquo;t need to input any hinduArabic integers, Go will randomly provide integers and test agains inverted method (Roman to Hindu-Arabic and Hindu-Arabic to Roman conversion should be the same)\nThe quick.Check method will randomly suply data and will call assertion method\nfunc TestPropertiesOfConversion(t *testing.T) { assertion := func(hinduArabic int) bool { roman := ConvertToRoman(hinduArabic) fromRoman := ConvertToHinduArabic(roman) return fromRoman == hinduArabic } if err := quick.Check(assertion, nil); err != nil { t.Error(\u0026#34;failed checks\u0026#34;, err) } } Reference: Learn Go with tests\nStatic code analysis go vet to check for potential issues our code might have. (Remember, unused imports and variables do not count in this because those are issues for sure and it won\u0026rsquo;t allow you to compile)\nHttp mock We have to use WireMock (arguably awesome tool) to create mock api servers. Go has httptest package, that can create the same thing out of box from language.\nStatically typed So you don\u0026rsquo;t get surprises in PROD\nSmaller binary Since it compiles to assembly directly, it is only one library and we don\u0026rsquo;t need any dependency or need to install any software (I am talking to you JDK, Python, and NodeJs) to run the Go binary.\nIn fact, I\u0026rsquo;ve seen that binary running inside scratch container. That means that it does not even require proper OS (almost).\nMy Java Spring project was 50 MiB jar file (plug OS plus JDK) but the same Go program was having 15 MiB\nFaster startup I have seen Go projects starting as fast as python or nodejs.\nMy Java Spring project took 30 seconds to start but the same Go program took 5 seconds.\nSmaller resource footprint Because of the above reasons, it requires minimal resources to run\nMy Java Spring project took 50+ MiB of RAM after start but the same Go program consumed 5 MiB.\nCloud Ready Because of the above reasons, it is best suited for cloud deployment\nMany (if not most) cloud tools are created in Go. Examples, Kubernetes, Docker, OpenTelemetry, Sops, CockroachDB, Consul, Hugo, Terraform, etc.\nDependency You don\u0026rsquo;t have to import any binary to the project, Everything is source code. You just provide github link and go will fetch sourcecode and make the dependency available.\nSince, everything is source code (and no class), the final binary will have only code available that are used. (Compare this with java, where even if you use only one method of a utility library, but if the jar file is available in dependency then it will include in final binary and the every class from that utility potentially can be loaded in JVM)\nImmutability What do you think output of the following code?\naccount := Account{InitialBalance: 50.0} account.Add(50.0) fmt.PrintF(account.Balance()) Do you think output will be 100.0? Then, you are wrong. Go code is immutable by default, you either have to assign it to a new variable or pass as a pointer\nBetter pointer Sometimes it is better to have pointers for performance reasons.\nEven in that case, it does not allow us to do pointer arithmetics.\nIDE VS Code has plugins that work like charm. IntelliJ GoLand is (paid) awesome tool.\n","permalink":"https://akshayvadher.github.io/posts/why-go/","summary":"Why Go lang. What are the feature I like the most.","title":"Why Go"},{"content":" A few months ago I switched to Windows. The biggest thing I missed - ZSH and Oh My Zsh.\nWorking with windows cmd or Powershell is just pathetic. You try to execute ls command and turned out, it is not supported.\nWhat do I need from a command prompt? Following are all the capabilities from a shell/prompt/terminal\nTabs (I used Tilix in Ubuntu/PopOs) Bit of Jazz (Colors, Icons, Emojis) (OhMyZ suffice this and following all things) Information about current dir (Example, using git plugin, shell shows current branch, number of commits to push, etc) Autocompletion (Folder structure) Autocompletion (Commands based on history) (This is most important for me) Familiarity (It should support relatively same commands. Example ls) Interaction with other tools (Like opening VSCode, editing file, installing softwares) Windows alternative After installing a few components, the shell in windows became so powerful that I don\u0026rsquo;t desire to switch back to linux.\nTurned out, the only thing I missed about linux is its terminal capability.\nWhich alternatives in windows solved all issues\nTabs (Windows Terminal) Jazz (Starship, Nerd Fonts) Plugin (Starship Plugins) Autocompletion (Powershell 7 native feature) Autocompletion (Commands based on history - Powershell 7 native feature) Familiarity (Powershell 7 supports many such commands; ls, curl are two examples) Interaction (Powershell 7, chocolatey) Steps to install Powershell 7 Follow this link and from the releases page, download .msi and double click install.\nNerd Fonts It powers all the Jazz for terminal like showing icons, emojis, and ligatures. Follow this link and download any font you like. Fira Code is the most popular. Install after downloading.\nWindows Terminal Follow this link. It will open a web page that will redirect to Windows store. Install from Windows store.\nSet default profile to Powershell 7: Open Windows terminal ü°™ Open settings (That down arrow in the top bar) ü°™ Set Default Profile as \u0026ldquo;Powershell\u0026rdquo; (the black icon one, not the blue \u0026ldquo;Windows Powershell\u0026rdquo;)\nSet Fonts: Settings ü°™ Profiles (left menu) ü°™ Powershell ü°™ Appearance ü°™ Font face ü°™ Select the installed Nerd font. You can change the color scheme too, Solarized Dard was my favorite one time.\nChocolatey This step is optional but it will help installing software from terminal easily.\nInstall chocolatey from the link.\nUsage ü°™ choco install jre8\nStarship Before installing Starship, I tried Oh My Posh. It was good, it can totally emulate Oh My Zsh. However, I found Starship more elegant.\nThe best way to install Starship is using chocolatey. Or follow starship docs and install via some other way.\nchoco install starship Create or Open profile file.\ncode $PROFILE // OR if VS Code is not installed notepad $PROFILE This will create a file named Microsoft.PowerShell_profile.ps1 in your Users ü°™ \u0026lt; User \u0026gt; ü°™ Documents ü°™ Powershell directory. This file is the same as .zshrc or .bashrc file. You can provide initial commands, aliases, etc.\nSet Starship as the default shell. Put this inside the profile file so that every time you open the terminal, it loads Starship.\nInvoke-Expression (\u0026amp;starship init powershell) Customize (Add Jazz) to Starship. However, I won\u0026rsquo;t recommend doing this right away. First, setup everything and start using it all and then come back to this and tweak however you like.\nIf you still want to configure, I will add my configuration file below. Paste that code to your C:\\Users\\\u0026lt;username\u0026gt;\\.config\\starship.toml file. Or some presets are available here\nadd_newline = true # Replace the \u0026#34;‚ùØ\u0026#34; symbol in the prompt with \u0026#34;‚ûú\u0026#34; [character] # The name of the module we are configuring is \u0026#34;character\u0026#34; success_symbol = \u0026#34;[‚ûú](bold green)\u0026#34; # The \u0026#34;success_symbol\u0026#34; segment is being set to \u0026#34;‚ûú\u0026#34; with the color \u0026#34;bold green\u0026#34; # Disable the package module, hiding it from the prompt completely [package] disabled = true [cmd_duration] min_time = 1_000 # Show command duration over 10,000 milliseconds (=10 sec) format = \u0026#34; took [$duration]($style)\u0026#34; [git_commit] commit_hash_length = 8 style = \u0026#34;bold white\u0026#34; [git_state] format = \u0026#39;[\\($state( $progress_current of $progress_total)\\)]($style) \u0026#39; [git_status] conflicted = \u0026#34;‚öîÔ∏è \u0026#34; ahead = \u0026#34;üèéÔ∏è üí® √ó${count}\u0026#34; behind = \u0026#34;üê¢ √ó${count}\u0026#34; diverged = \u0026#34;üî± üèéÔ∏è üí® √ó${ahead_count} üê¢ √ó${behind_count}\u0026#34; untracked = \u0026#34;üõ§Ô∏è √ó${count}\u0026#34; stashed = \u0026#34;üì¶ \u0026#34; modified = \u0026#34;üìù √ó${count}\u0026#34; staged = \u0026#34;üóÉÔ∏è √ó${count}\u0026#34; renamed = \u0026#34;üìõ √ó${count}\u0026#34; deleted = \u0026#34;üóëÔ∏è √ó${count}\u0026#34; style = \u0026#34;bright-white\u0026#34; format = \u0026#34;$all_status$ahead_behind\u0026#34; [memory_usage] format = \u0026#34;$symbol[${ram}( | ${swap})]($style) \u0026#34; threshold = 70 style = \u0026#34;bold dimmed white\u0026#34; disabled = false [golang] format = \u0026#34;via [üèéüí® $version](bold cyan) \u0026#34; [kubernetes] format = \u0026#39;k8s [‚õµ ($user on )($cluster in )$context \\($namespace\\)](green) \u0026#39; disabled = false [kubernetes.context_aliases] \u0026#34;arn:aws:eks:\u0026lt;REGION_HERE\u0026gt;:ACCOUNT_ID_HERE:cluster/dev\u0026#34; = \u0026#34;dev\u0026#34; \u0026#34;arn:aws:eks:\u0026lt;REGION_HERE\u0026gt;:ACCOUNT_ID_HERE:cluster/test\u0026#34; = \u0026#34;test\u0026#34; \u0026#34;.*/openshift-cluster/.*\u0026#34; = \u0026#34;openshift\u0026#34; \u0026#34;gke_.*_(?P\u0026lt;var_cluster\u0026gt;[\\\\w-]+)\u0026#34; = \u0026#34;gke-$var_cluster\u0026#34; [battery] full_symbol = \u0026#34;üîã \u0026#34; charging_symbol = \u0026#34;‚ö°Ô∏è \u0026#34; discharging_symbol = \u0026#34;üíÄ \u0026#34; [[battery.display]] threshold = 30 style = \u0026#34;bold red\u0026#34; Autocompletion Put the following lines in your profile file and you are done\nSet-PSReadlineKeyHandler -Key Tab -Function MenuComplete Set-PSReadlineKeyHandler -Key UpArrow -Function HistorySearchBackward Set-PSReadlineKeyHandler -Key DownArrow -Function HistorySearchForward Controversial opinion, after using this for some time, I found this autocompletion better than what we had in ZSH.\nIf you want to execute commands from history then type a few characters from command the hit ‚¨ÜÔ∏è it will show all the commands from history. For example, if you type docker + ‚¨ÜÔ∏è then it will show docker build . (in case you executed that in history)\nThe best thing, using tab you can have auto suggest for the commands you never executed. Like if I type git and tab, it will show git fetch, git pull, basically all the possible commands I can execute using git. (Update, I might have installed posh git and that might be doing it)\nAlias If you want to set up an alias then open the profile file and set alias like\nSet-Alias k kubectl; Set-Alias ka getAllKubernetes; function getAllKubernetes(){ kubectl get po,no,svc,ing --all-namespaces; kubectl get cm,secret -n app } Search We miss grep in Windows. There is almost similar utility in Windos called findstr. Usage ‚¨áÔ∏è‚¨á\ncat file.txt | findstr \u0026#34;search\u0026#34; Env variable This is not directly related but this comes a lot. It is easy to set env variable in Linux. export ENV_A=\u0026quot;ABC\u0026quot;. Also all the setup guideline of any software assume that you are on Linux and will provide the export based command in the example.\nHowever powershell has different syntaxt; Use following syntax if you want to set any environment variable.\n$env:MY_ENV_VARIABLE = \u0026#34;VALUE\u0026#34; // to set $env:MY_ENV_VARIABLE // to print/get Back Search Cltr + r will do the back search the same as Linux terminal\nLinux inside windows You can still enable wsl 2 inside windows and make use of all the features of Windows terminal and still can use Linux under the hood. It is a different topic and requires its own post.\nI sometimes use git bash where someone has written a linux specific script and I don\u0026rsquo;t want to spin off WSL just for one commant.\nHTTP client This is probably a different topic. But we need to use CURL a lot. There are multiple ways.\nInstall curl using choco and use it. choco install curl Use Invoke-WebRequest in powershell. It is a built-in command. (though it is not that good) Use HTTPie. choco install httpie. It is way more convenient than curl and Invoke-WebRequest. Example ‚¨áÔ∏è‚¨á http :8080/api/v1/health a=b Here it will automatically consider localhost as host. Also, as we have passed a=b it will automatically consider it as a POST request with Content-Type: application/json and body as {\u0026quot;a\u0026quot;:\u0026quot;b\u0026quot;}.\nConclusion Maybe it might look complex to setup and it might not be as powerfull as other alternatives. But these things are tools not toys. If those help me get things done then I am happy.\n","permalink":"https://akshayvadher.github.io/posts/steps-to-make-windows-terminal-so-good-you-wont-miss-zsh/","summary":"A few months back I switched to Windows and I missed ZSH promt so much. But after these setup I don\u0026rsquo;t want to go back.","title":"Steps to Make Windows Terminal So Good You Won't Miss Zsh"},{"content":" Hi,\nI am Akshay Vadher (‡™Ö‡™ï‡´ç‡™∑‡™Ø ‡™µ‡™æ‡™¢‡´á‡™∞)\n","permalink":"https://akshayvadher.github.io/about-me/","summary":"about me","title":"About me"}]